name: C++ CI & Build Verification

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    name: ${{ matrix.os }} / ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel all jobs if one fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          # Windows uses MSVC by default, no need to specify compilers

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive # Checkout submodules if any

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Add your project-specific dependencies here.
          # Example: sudo apt-get install -y libboost-dev libssl-dev
          sudo apt-get install -y build-essential

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Add your project-specific dependencies here.
          # Example: brew install boost openssl
          echo "No specific macOS dependencies for this example."

      - name: Set up MSVC environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        # This step generates the build files for the specific platform and build type
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}

      - name: Build Project
        # This step uses the generated build files to compile the project
        run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

      - name: Run Tests
        # This step runs tests only on Release builds to save time, but can be adjusted.
        # It assumes you are using CTest, the standard CMake testing framework.
        if: matrix.build_type == 'Release'
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure -C ${{ matrix.build_type }}